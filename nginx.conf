worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {
    server {
        listen 8080;

        location / {
            default_type text/html;
            content_by_lua 'ngx.say("<p>hello, world</p>")';
        }

        location /httpdns {
            default_type 'text/plain';
            content_by_lua_block {
                local uid = ngx.var.arg_uid
                local clientip = ngx.var.arg_clientip
                local domain = ngx.var.arg_domain
                local cache_key = "httpdns:"..uid

                local httpdns = require("httpdns")
                if not httpdns then
                    ngx.log(ngx.OK, "Failed to require b!")
                    ngx.exit(500)
                end

                local ip = httpdns.get_cache(cache_key)
                if ip then
                    ngx.say(ip)
                    return
                end

                ip = httpdns.find_ip(uid)
                if ip then
                    httpdns.set_cache(cache_key, ip)
                    ngx.say(ip)
                    return
                end

                ip = httpdns.find_dns(domain)
                if ip then
                    httpdns.update_ip(uid, ip)
                    httpdns.set_cache(cache_key, ip)
                    ngx.say(ip)
                    return
                end
            }
        }
    }
}